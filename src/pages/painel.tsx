import { useEffect, useState } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { Button, Container, Grid, Backdrop, Theme } from '@material-ui/core'
import { createStyles, makeStyles } from '@material-ui/styles';
import CircularProgress from '@material-ui/core/CircularProgress';

import InfoCard from '../components/cards/InfoCard'
import Modal from '../components/modals/Modal'
import Chart from '../components/charts/Chart'
import TransactionForm from '../components/forms/TransactionForm'
import Table from '../components/tables/Table'
import apiBtc, { apiCotation } from '../services/apiBtc'
import { convertCurrent, dateFormatter } from '../uteis/helpers'
import useLoading from '../hook/useLoading';

const useStyles = makeStyles((theme: Theme) =>
  createStyles({
    backdrop: {
      zIndex: 3,
      color: '#fff',
    },
  }),
);

interface TransactionResponseInterface {
  id?: number
  data?: string
  cotacao?: number
  compra?: number
  total?: string
}

const Home: NextPage = () => {
  const classes = useStyles()
  const {loading, handleLoading} = useLoading()

  const [openForm, setOpenForm] = useState(false)
  const [transactions, setTransactions] = useState<TransactionResponseInterface[]>([])
  const [cotation, setCotation] = useState(0)
  const [total, setTotal] = useState('')
  const [dataForm, setDataForm] = useState(null)

  const getTransactions = async () => {
    handleLoading && handleLoading(true)
    await apiBtc.get('/transaction')
      .then((response: any) => {
        const data: TransactionResponseInterface[] = response.data?.map((transaction: any) => ({
          id: transaction.id,
          data: transaction.transaction_date,
          cotacao: +transaction.value_buy,
          compra: transaction.quantity + ' BTC',
          total: transaction.quantity * transaction.value_buy
        }))

        const total: any = data.reduce((acc: number, act: any) => acc + act.total, 0)
        setTotal(convertCurrent(+total.toFixed(2)))
        
        setTransactions(data)
      })
      .finally(() => handleLoading && handleLoading(false))
  }
  const getCotation = async () => {
    handleLoading && handleLoading(true)
    const params = {
      ids: 'bitcoin',
      vs_currencies: 'brl'
    }
    await apiCotation.get('/simple/price', {params})
      .then((response: any) => {
        setCotation(convertCurrent(response.data[params.ids].brl))
      })
      .finally(() => handleLoading && handleLoading(false))
  }

  const handleDelete = async (data: any) => {
    handleLoading && handleLoading(true)
    await apiBtc.delete(`/transaction/${data.id}`)
      .then((response: any) => {
        getTransactions()
      })
      .finally(() => handleLoading && handleLoading(false))
  }

  const handleEdit = (data: any) => {
    setDataForm(data)
    setOpenForm(true)   
  }

  useEffect(() => {
    if (openForm === false) {
      getTransactions()
    }
  }, [openForm])

  useEffect(() => {
    getCotation()
  }, [])
console.log('loading',loading);

  return (
    <Container>
      <Head>
        <title>Meus Bitcons</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <Backdrop className={classes.backdrop} open={loading || false}>
        <CircularProgress color="inherit" />
      </Backdrop>

      <Grid
        container
        spacing={3}
        justifyContent="space-between"
        alignItems="center"
      >
        <Grid item xs={8}>
          <h1>Bem vindo!</h1>
        </Grid>
        <Grid
          container
          item
          xs={4}
          justifyContent="flex-end"
        >
          <Button
            variant="contained"
            size="large"
            style={{ background: 'var(--bg-primary)', color: 'white' }}
            onClick={() => setOpenForm(!openForm)}
          >
            Nova Transação
          </Button>
        </Grid>
      </Grid>
      <Grid container spacing={3}>
        <Grid item xs={3}>
          <InfoCard
            title="Total Investido"
            value={total}
            type="error"
          />
        </Grid>
        <Grid item xs={3}>
          <InfoCard
            title="Rendimento"
            value="R$ 985,75"
            type="success"
          />
        </Grid>
        <Grid item xs={3}>
          <InfoCard
            title="% de Retorno"
            value="8,57 %"
            type="primary"
          />
        </Grid>
        <Grid item xs={3}>
          <InfoCard
            title="Cotação Atual"
            value={cotation}
            type="warning"
          />
        </Grid>
        {/* <Grid item xs={8}>
          <Chart
            data={ transactions.map((transaction: any) => {             
                return { argument: dateFormatter(transaction.data), value: convertCurrent(transaction.total) }
            })}
          />
        </Grid> */}

        <Grid item xs={11}>
          <Table
            values={transactions || [{}]}
            editCallback={handleEdit}
            deleteCallback={handleDelete}
          />
        </Grid>
      </Grid>

      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Modal
            title="Nova Transação"
            open={openForm}
          >
            <TransactionForm setOpenForm={setOpenForm} defaultValues={dataForm ?? {}} />
          </Modal>
        </Grid>
      </Grid>
    </Container>
  )
}

export default Home
